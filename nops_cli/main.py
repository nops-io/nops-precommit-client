"""
Usage:
Use this script to get the pricing and dependencies details for your terraform projects
python3 main.py  <tf_file1>.tf <tf_file2>.tf --pricing --iac-type terraform
python3 main.py  <tf_file1>.tf <<tf_file2>.tf --dependency --iac-type terraform
python3 main.py  <tf_file1>.tf <tf_file2>.tf --pricing --dependency --iac-type terraform
"""
import argparse
from nops_cli.subcommands.pricing.pricing import Pricing
from nops_cli.subcommands.dependancy.dependency import Dependency
from nops_cli.constants.input_enums import Periodicity, IacTypes
from nops_cli.subcommands.github.github_action_pull_request import GithubPullRequestAction
from nops_cli.subcommands.helm_recommendation.helm_recommendations import HelmRecommendations
from nops_cli.libs.common_lib import check_and_get_terraform_project
from nops_cli.utils.logger_util import logger

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--pricing', default=False, action="store_true",
                        help="Get Pricing Projection")
    parser.add_argument('--dependency', default=False, action="store_true",
                        help="Get Dependencies")
    parser.add_argument('--iac-type', default="terraform", choices=["terraform"],
                        help="IAC type")
    parser.add_argument('--periodicity', default="monthly",
                        choices=["hourly", "daily",
                                 "monthly", "yearly"],
                        help="Select periodicity for pricing projection")
    parser.add_argument("filenames", nargs="*", help="Space separated terraform plans(.tf) files")
    parser.add_argument('--github_action', default=False, action="store_true",
                        help="Executing script using Github Actions")
    parser.add_argument('--token', required=False, help="Github Access Token")
    parser.add_argument('--pr_number', required=False, help="Github Pull Request Number")
    parser.add_argument('--repo_name', required=False, help="Github Repository Owner and Name. eg. "
                                                            "nops-io/nops-test-repo-name")
    parser.add_argument('--json_out_file', required=False, help="Out file to add project cost "
                                                                "outputs in JSON format. This file "
                                                                "can be used to compute the "
                                                                "comparative cloud cost impact in "
                                                                "later run")
    parser.add_argument('--json_in_file', required=False, help="File having the project cost in"
                                                               " JSON format from previous run. "
                                                               "(file generated by --json_out_file)")
    parser.add_argument('--helm_chart_dir', required=False, help="Helm chart directory path")
    parser.add_argument('--eks_cluster_id', required=False, help="Helm container name")
    parser.add_argument('--recommedation_periodicity', required=False, default="THIRTY_DAYS",
                        choices=["TWENTY_FOUR_HOURS", "SEVEN_DAYS", "THIRTY_DAYS"],
                        help="nOps recommendations")
    parser.add_argument('--create_recommendation_pull_request', default=False, action="store_true",
                        help="Set if you want to create Pull Request for nOps recommendations?")
    parser.add_argument('--auto_approve_helm_recommendations', default=False, action="store_true",
                        help="Set if you want to auto approve the helm recommendations")
    args = parser.parse_args()

    pricing = args.pricing
    dependency = args.dependency
    iac_type = args.iac_type
    periodicity = args.periodicity
    filenames = args.filenames
    github_action = args.github_action
    json_out_file = args.json_out_file
    json_in_file = args.json_in_file
    helm_chart_dir = args.helm_chart_dir
    eks_cluster_id = args.eks_cluster_id
    recommedation_periodicity = args.recommedation_periodicity
    create_recommendation_pr = args.create_recommendation_pull_request
    auto_approve_helm_recommendations = args.auto_approve_helm_recommendations

    project_dir_paths, invalid_project_dir_paths = check_and_get_terraform_project(filenames)
    logger.debug(f"Valid terraform projects {project_dir_paths}")
    logger.debug(f"Invalid terraform projects {invalid_project_dir_paths}")
    projects_pricing = []
    for project_dir_path in project_dir_paths:
        if pricing:
            pricing = Pricing(project_dir_path, periodicity=periodicity, iac_type=iac_type)
            pricing.display_pricing()
            projects_pricing.append(pricing)
        if dependency:
            dependency = Dependency(project_dir_path, periodicity=periodicity, iac_type=iac_type)
            dependency.display_dependency()
    if github_action and (json_out_file or json_in_file):
        pr_number = args.pr_number
        repo_name = args.repo_name
        git_token = args.token
        git_pr_action = GithubPullRequestAction(pr_number, git_token, repo_name)
        if json_out_file:
            git_pr_action.create_cloud_cost_json_file(projects_pricing, json_out_file,
                                                      invalid_project_dir_paths)
        elif json_in_file:
            git_pr_action.add_cloud_cost_impact_on_pr(projects_pricing, json_in_file,
                                                      invalid_project_dir_paths, periodicity)

    if helm_chart_dir and eks_cluster_id and recommedation_periodicity:
        helm = HelmRecommendations(helm_chart_dir, eks_cluster_id, recommedation_periodicity,
                                   auto_approve_helm_recommendations)
        helm.set_containers()
        helm.apply_containers_recommendations()
        if create_recommendation_pr:
            helm.commit_changes_and_create_pr()


if __name__ == '__main__':
    main()